{"mappings":"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","sources":["src/background.js","src/display_citydate.js","src/search-bar.js"],"sourcesContent":["export function fetchCityImage(cityName) {\n  const URL = 'https://pixabay.com/api/';\n  const KEY = 'key=40060920-6840b24aaee2d2997514145f9';\n  const requestParameters = `?image_type=photo&category=travel&orientation=horizontal&q=${encodeURIComponent(\n    cityName\n  )}&page=1&per_page=40`;\n\n  return fetch(URL + requestParameters + '&' + KEY)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return res.json();\n    })\n    .then(image => {\n      if (image.hits && image.hits.length) {\n        const randomImg = Math.floor(Math.random() * image.hits.length);\n        return image.hits[randomImg].largeImageURL;\n      } else {\n        throw new Error('No images found.');\n      }\n    });\n}\n","const apiKey = '384cfe62d8b3ed2e8a555db347025eef';\n\nexport function updateTimeForCity(cityName) {\n  if (!cityName) {\n    console.error('City name is missing.');\n    return;\n  }\n\n  fetch(\n    `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (data.cod === 200) {\n        const sunriseTime = new Date(\n          data.sys.sunrise * 1000\n        ).toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: false,\n        });\n        const sunsetTime = new Date(data.sys.sunset * 1000).toLocaleTimeString(\n          [],\n          {\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: false,\n          }\n        );\n\n        const sunriseDisplay = document.getElementById('sunriseDisplay');\n        const sunsetDisplay = document.getElementById('sunsetDisplay');\n\n        sunriseDisplay.textContent = `${sunriseTime}`;\n        sunsetDisplay.textContent = `${sunsetTime}`;\n      } else {\n        console.error('Error fetching data for city:', data.message);\n      }\n    })\n    .catch(error =>\n      console.error('Error fetching data from OpenWeatherMap:', error)\n    );\n}\n\nexport function updateTimeWithTimeZone(timezoneOffset) {\n  const currentTime = new Date();\n  const localTimeToGMT = currentTime.getTimezoneOffset() / 60;\n  const timeDifference = timezoneOffset + localTimeToGMT;\n\n  let hours = currentTime.getHours() + timeDifference;\n  hours = (hours + 24) % 24; // Ensure hours are between 0 and 23\n\n  const formattedHour = String(hours).padStart(2, '0');\n  const formattedMin = String(currentTime.getMinutes()).padStart(2, '0');\n  const formattedSec = String(currentTime.getSeconds()).padStart(2, '0');\n\n  const timeElement = document.querySelector('.dateDisplay__hour');\n  timeElement.textContent = `${formattedHour}:${formattedMin}:${formattedSec}`;\n}\n","import { fetchCityImage } from './background.js';\nimport { displayCurrentTime } from './display_currentdate.js';\nimport { updateTimeForCity } from './display_citydate.js';\nimport { updateTimeWithTimeZone } from './display_citydate.js';\n\nconst Key = '07aed853a2b3116bf7e19dfeee63b968';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('DOMContentLoaded fired');\n  const form = document.querySelector('.search-bar');\n  const searchBarInput = document.querySelector('.search-bar_input');\n  const starIcon = document.querySelector('.search-bar_favorites-icon');\n  const favoritesList = document.querySelector('.favorites_list');\n  const favoritesLeftIcon = document.querySelector('.favorites_prev-btn');\n  const favoritesRightIcon = document.querySelector('.favorites_next-btn');\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n    const cityName = searchBarInput.value.trim();\n    if (cityName) {\n      fetchWeather(cityName);\n    }\n  });\n\n  starIcon.addEventListener('click', function () {\n    const cityName = searchBarInput.value.trim();\n    this.classList.toggle('selected');\n    if (cityName && !isCityInFavorites(cityName)) {\n      addToFavorites(cityName);\n    }\n  });\n\n  const SCROLL_AMOUNT = 100;\n  favoritesLeftIcon.addEventListener('click', function () {\n    favoritesList.scrollBy({\n      left: -SCROLL_AMOUNT,\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  favoritesRightIcon.addEventListener('click', function () {\n    favoritesList.scrollBy({\n      left: SCROLL_AMOUNT,\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  function fetchWeather(cityName) {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${Key}`;\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        if (data.cod === 200) {\n          fetchCityImage(cityName)\n            .then(imageUrl => {\n              console.log('Fetched Image URL:', imageUrl);\n              document.body.style.backgroundImage = `url(${imageUrl})`;\n              document.body.style.backgroundSize = 'cover';\n              document.body.style.backgroundPosition = 'center';\n              document.body.style.backgroundRepeat = 'no-repeat';\n        \n              const timezoneOffset = data.timezone / 3600;\n              document.body.style.height = '954px';\n              updateTimeForCity(cityName);\n              updateTimeWithTimeZone(timezoneOffset);\n            })\n            .catch(error => {\n              console.error('Error fetching city image:', error);\n            });\n        } else {\n          alert(data.message);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching weather data:', error);\n      });\n  }\n\n  function isCityInFavorites(cityName) {\n    const items = favoritesList.querySelectorAll('.favorites_item');\n    for (let item of items) {\n      if (item.textContent.trim().toLowerCase() === cityName.toLowerCase()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function addToFavorites(cityName) {\n    const listItem = document.createElement('li');\n    listItem.classList.add('favorites_item');\n    listItem.textContent = cityName;\n\n    const closeButton = document.createElement('span');\n    closeButton.classList.add('close-button');\n    closeButton.textContent = 'x';\n    closeButton.addEventListener('click', function () {\n      listItem.remove();\n    });\n\n    listItem.appendChild(closeButton);\n    favoritesList.appendChild(listItem);\n  }\n\n  const findCityLocation = () => {\n    console.log('findCityLocation called');\n\n    const success = position => {\n      console.log('Location access allowed');\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      const geoApiUrl = `http://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&appid=${Key}`;\n      console.log('Latitude:', latitude, 'Longitude:', longitude);\n\n      fetch(geoApiUrl)\n        .then(res => res.json())\n        .then(data => {\n          if (data && data.length > 0) {\n            const cityName = data[0].name;\n            console.log('Resolved City:', cityName);\n            fetchWeather(cityName);\n          } else {\n            console.error('City not found.');\n          }\n        })\n        .catch(error => {\n          console.error('Error fetching city name:', error);\n        });\n    };\n\n    const error = () => {\n      console.error('Could not get location.');\n    };\n    navigator.geolocation.getCurrentPosition(success, error);\n    const locationIcon = document.querySelector('.search-bar_location-icon');\n    locationIcon.addEventListener('click', () => {\n      console.log('Location icon clicked');\n      navigator.geolocation.getCurrentPosition(success, error);\n    });\n  };\n  findCityLocation();\n});\n"],"names":["$6a427eaf56dc66fa$export$a9bd09813a73c79a","cityName","requestParameters","encodeURIComponent","fetch","URL","then","res","ok","Error","json","image","hits","length","randomImg","Math","floor","random","largeImageURL","$1e81b917887df130$export$76cd35b725472fef","response","data","cod","sunriseTime","Date","sys","sunrise","toLocaleTimeString","hour","minute","hour12","sunsetTime","sunset","sunriseDisplay","document","getElementById","sunsetDisplay","textContent","console","error","message","catch","$1e81b917887df130$export$5b79b85a9d852edc","timezoneOffset","currentTime","timeDifference","getTimezoneOffset","hours","getHours","formattedHour","String","padStart","formattedMin","getMinutes","formattedSec","getSeconds","querySelector","addEventListener","log","form","searchBarInput","starIcon","favoritesList","favoritesLeftIcon","favoritesRightIcon","event","preventDefault","value","trim","fetchWeather","this","classList","toggle","items","querySelectorAll","item","toLowerCase","isCityInFavorites","listItem","createElement","add","closeButton","remove","appendChild","addToFavorites","imageUrl","body","style","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","timezone","height","alert","scrollBy","left","top","behavior","success","position","latitude","coords","longitude","geoApiUrl","name","error1","navigator","geolocation","getCurrentPosition","findCityLocation"],"version":3,"file":"index.b088c2f0.js.map"}