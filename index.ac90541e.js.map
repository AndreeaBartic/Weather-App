{"mappings":"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","sources":["src/background.js","src/display_citydate.js","src/display_currentdate.js","src/search-bar.js"],"sourcesContent":["export function fetchCityImage(cityName) {\n  const URL = 'https://pixabay.com/api/';\n  const KEY = 'key=40060920-6840b24aaee2d2997514145f9';\n  const requestParameters = `?image_type=photo&category=travel&orientation=horizontal&q=${encodeURIComponent(\n    cityName\n  )}&page=1&per_page=40`;\n\n  return fetch(URL + requestParameters + '&' + KEY)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return res.json();\n    })\n    .then(image => {\n      if (image.hits && image.hits.length) {\n        const randomImg = Math.floor(Math.random() * image.hits.length);\n        return image.hits[randomImg].largeImageURL;\n      } else {\n        throw new Error('No images found.');\n      }\n    });\n}\n","const apiKey = '384cfe62d8b3ed2e8a555db347025eef';\n\nexport function updateTimeForCity(cityName) {\n  if (!cityName) {\n    console.error('City name is missing.');\n    return;\n  }\n\n  fetch(\n    `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (data.cod === 200) {\n        const sunriseTime = new Date(\n          data.sys.sunrise * 1000\n        ).toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: false,\n        });\n        const sunsetTime = new Date(data.sys.sunset * 1000).toLocaleTimeString(\n          [],\n          {\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: false,\n          }\n        );\n\n        const sunriseDisplay = document.getElementById('sunriseDisplay');\n        const sunsetDisplay = document.getElementById('sunsetDisplay');\n\n        sunriseDisplay.textContent = `${sunriseTime}`;\n        sunsetDisplay.textContent = `${sunsetTime}`;\n      } else {\n        console.error('Error fetching data for city:', data.message);\n      }\n    })\n    .catch(error =>\n      console.error('Error fetching data from OpenWeatherMap:', error)\n    );\n}\n\nexport function updateTimeWithTimeZone(timezoneOffset) {\n  const currentTime = new Date();\n  const localTimeToGMT = currentTime.getTimezoneOffset() / 60;\n  const timeDifference = timezoneOffset + localTimeToGMT;\n\n  let hours = currentTime.getHours() + timeDifference;\n  hours = (hours + 24) % 24; // Ensure hours are between 0 and 23\n\n  const formattedHour = String(hours).padStart(2, '0');\n  const formattedMin = String(currentTime.getMinutes()).padStart(2, '0');\n  const formattedSec = String(currentTime.getSeconds()).padStart(2, '0');\n\n  const timeElement = document.querySelector('.dateDisplay__hour');\n  timeElement.textContent = `${formattedHour}:${formattedMin}:${formattedSec}`;\n}\n","export function displayCurrentTime() {\n  const currentDate = new Date();\n  const dayDisplay = document.getElementById('dayDisplay');\n  const monthDisplay = document.getElementById('monthDisplay');\n  const timeDisplay = document.getElementById('timeDisplay');\n  const sunriseDisplay = document.getElementById('sunriseDisplay');\n  const sunsetDisplay = document.getElementById('sunsetDisplay');\n\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = daysOfWeek[currentDate.getDay()];\n  const month = months[currentDate.getMonth()];\n  const day = currentDate.getDate();\n  const hours = currentDate.getHours();\n  const minutes = currentDate.getMinutes();\n  const seconds = currentDate.getSeconds();\n\n  const formattedTime = `${hours.toString().padStart(2, '0')}:${minutes\n    .toString()\n    .padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  const ordinalIndicator = getOrdinalIndicator(day);\n  function getOrdinalIndicator(day) {\n    if (day >= 11 && day <= 13) {\n      return 'th';\n    }\n    switch (day % 10) {\n      case 1:\n        return 'st';\n      case 2:\n        return 'nd';\n      case 3:\n        return 'rd';\n      default:\n        return 'th';\n    }\n  }\n  dayDisplay.textContent = `${day}${ordinalIndicator} ${dayOfWeek}`;\n  monthDisplay.textContent = `${month}`;\n  timeDisplay.textContent = formattedTime;\n\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(position => {\n      const { latitude, longitude } = position.coords;\n      const apiKey = '384cfe62d8b3ed2e8a555db347025eef';\n\n      fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}`\n      )\n        .then(response => response.json())\n        .then(data => {\n          const DayContent = `\n          <h3>${day}<sup class=\"exponent\">${getOrdinalIndicator(\n            day\n          )}</sup> ${dayOfWeek}</h3>\n        `;\n          dayDisplay.innerHTML = DayContent;\n          const sunrise = new Date(data.sys.sunrise * 1000).toLocaleTimeString(\n            [],\n            { hour: '2-digit', minute: '2-digit', hour12: false }\n          );\n          const sunset = new Date(data.sys.sunset * 1000).toLocaleTimeString(\n            [],\n            { hour: '2-digit', minute: '2-digit', hour12: false }\n          );\n\n          sunriseDisplay.textContent = `${sunrise}`;\n          sunsetDisplay.textContent = `${sunset}`;\n        })\n        .catch(error =>\n          console.error('Error fetching data from OpenWeatherMap:', error)\n        );\n    });\n  }\n}\n","import { fetchCityImage } from './background.js';\nimport { updateTimeForCity } from './display_citydate.js';\nimport { updateTimeWithTimeZone } from './display_citydate.js';\nimport { displayCurrentTime } from './display_currentdate.js';\n\nconst Key = '07aed853a2b3116bf7e19dfeee63b968';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('DOMContentLoaded fired');\n  const form = document.querySelector('.search-bar');\n  const searchBarInput = document.querySelector('.search-bar_input');\n  const starIcon = document.querySelector('.search-bar_favorites-icon');\n  const favoritesList = document.querySelector('.favorites_list');\n  const favoritesLeftIcon = document.querySelector('.favorites_prev-btn');\n  const favoritesRightIcon = document.querySelector('.favorites_next-btn');\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n    const cityName = searchBarInput.value.trim();\n    if (cityName) {\n      fetchWeather(cityName);\n    }\n  });\n\n  starIcon.addEventListener('click', function () {\n    const cityName = searchBarInput.value.trim();\n    this.classList.toggle('selected');\n    if (cityName && !isCityInFavorites(cityName)) {\n      addToFavorites(cityName);\n    }\n  });\n\n  const SCROLL_AMOUNT = 100;\n  favoritesLeftIcon.addEventListener('click', function () {\n    favoritesList.scrollBy({\n      left: -SCROLL_AMOUNT,\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  favoritesRightIcon.addEventListener('click', function () {\n    favoritesList.scrollBy({\n      left: SCROLL_AMOUNT,\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n  displayCurrentTime();\n  function fetchWeather(cityName) {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${Key}`;\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        if (data.cod === 200) {\n          fetchCityImage(cityName)\n            .then(imageUrl => {\n              console.log('Fetched Image URL:', imageUrl);\n              document.body.style.backgroundImage = `url(${imageUrl})`;\n              document.body.style.backgroundSize = 'cover';\n              document.body.style.backgroundPosition = 'center';\n              document.body.style.backgroundRepeat = 'no-repeat';\n\n              const timezoneOffset = data.timezone / 3600;\n              document.body.style.height = '954px';\n              updateTimeForCity(cityName);\n              updateTimeWithTimeZone(timezoneOffset);\n            })\n            .catch(error => {\n              console.error('Error fetching city image:', error);\n            });\n        } else {\n          alert(data.message);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching weather data:', error);\n      });\n  }\n\n  function isCityInFavorites(cityName) {\n    const items = favoritesList.querySelectorAll('.favorites_item');\n    for (let item of items) {\n      if (item.textContent.trim().toLowerCase() === cityName.toLowerCase()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function addToFavorites(cityName) {\n    const listItem = document.createElement('li');\n    listItem.classList.add('favorites_item');\n    listItem.textContent = cityName;\n\n    const closeButton = document.createElement('span');\n    closeButton.classList.add('close-button');\n    closeButton.textContent = 'x';\n    closeButton.addEventListener('click', function () {\n      listItem.remove();\n    });\n\n    listItem.appendChild(closeButton);\n    favoritesList.appendChild(listItem);\n  }\n\n  const findCityLocation = () => {\n    console.log('findCityLocation called');\n\n    const success = position => {\n      console.log('Location access allowed');\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      const geoApiUrl = `http://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&appid=${Key}`;\n      console.log('Latitude:', latitude, 'Longitude:', longitude);\n\n      fetch(geoApiUrl)\n        .then(res => res.json())\n        .then(data => {\n          if (data && data.length > 0) {\n            const cityName = data[0].name;\n            console.log('Resolved City:', cityName);\n            fetchWeather(cityName);\n          } else {\n            console.error('City not found.');\n          }\n        })\n        .catch(error => {\n          console.error('Error fetching city name:', error);\n        });\n    };\n\n    const error = () => {\n      console.error('Could not get location.');\n    };\n    navigator.geolocation.getCurrentPosition(success, error);\n    const locationIcon = document.querySelector('.search-bar_location-icon');\n    locationIcon.addEventListener('click', () => {\n      console.log('Location icon clicked');\n      navigator.geolocation.getCurrentPosition(success, error);\n    });\n  };\n\n  findCityLocation();\n});\n"],"names":["$6a427eaf56dc66fa$export$a9bd09813a73c79a","cityName","requestParameters","encodeURIComponent","fetch","URL","then","res","ok","Error","json","image","hits","length","randomImg","Math","floor","random","largeImageURL","$1e81b917887df130$export$76cd35b725472fef","response","data","cod","sunriseTime","Date","sys","sunrise","toLocaleTimeString","hour","minute","hour12","sunsetTime","sunset","sunriseDisplay","document","getElementById","sunsetDisplay","textContent","console","error","message","catch","$1e81b917887df130$export$5b79b85a9d852edc","timezoneOffset","currentTime","timeDifference","getTimezoneOffset","hours","getHours","formattedHour","String","padStart","formattedMin","getMinutes","formattedSec","getSeconds","querySelector","$13ba7c28a585df7a$export$14ea3ff1396d9e58","currentDate","dayDisplay","monthDisplay","timeDisplay","dayOfWeek","getDay","month","getMonth","day1","getDate","minutes","seconds","formattedTime","toString","ordinalIndicator","getOrdinalIndicator","day","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","DayContent","innerHTML","addEventListener","log","form","searchBarInput","starIcon","favoritesList","favoritesLeftIcon","favoritesRightIcon","event","preventDefault","value","trim","fetchWeather","this","classList","toggle","items","querySelectorAll","item","toLowerCase","isCityInFavorites","listItem","createElement","add","closeButton","remove","appendChild","addToFavorites","imageUrl","body","style","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","timezone","height","alert","scrollBy","left","top","behavior","success","geoApiUrl","name","error1","findCityLocation"],"version":3,"file":"index.ac90541e.js.map"}