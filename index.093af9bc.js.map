{"mappings":"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","sources":["src/background.js","src/search-bar.js"],"sourcesContent":["export function fetchCityImage(cityName) {\n  const URL = 'https://pixabay.com/api/';\n  const KEY = 'key=40060920-6840b24aaee2d2997514145f9';\n  const requestParameters = `?image_type=photo&category=travel&orientation=horizontal&q=${encodeURIComponent(\n    cityName\n  )}&page=1&per_page=40`;\n\n  return fetch(URL + requestParameters + '&' + KEY)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return res.json();\n    })\n    .then(image => {\n      if (image.hits && image.hits.length) {\n        const randomImg = Math.floor(Math.random() * image.hits.length);\n        return image.hits[randomImg].largeImageURL;\n      } else {\n        throw new Error('No images found.');\n      }\n    });\n}\n","import { fetchCityImage } from './background.js';\n\nconst Key = '07aed853a2b3116bf7e19dfeee63b968';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('DOMContentLoaded fired');\n  const form = document.querySelector('.search-bar');\n  const searchBarInput = document.querySelector('.search-bar_input');\n  const starIcon = document.querySelector('.search-bar_favorites-icon');\n  const favoritesList = document.querySelector('.favorites_list');\n  const favoritesLeftIcon = document.querySelector('.favorites_prev-btn');\n  const favoritesRightIcon = document.querySelector('.favorites_next-btn');\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n    const cityName = searchBarInput.value.trim();\n    if (cityName) {\n      fetchWeather(cityName);\n    }\n  });\n\n  starIcon.addEventListener('click', function () {\n    const cityName = searchBarInput.value.trim();\n    this.classList.toggle('selected');\n    if (cityName && !isCityInFavorites(cityName)) {\n      addToFavorites(cityName);\n    }\n  });\n\n  const SCROLL_AMOUNT = 100;\n  favoritesLeftIcon.addEventListener('click', function () {\n    favoritesList.scrollBy({\n      left: -SCROLL_AMOUNT,\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  favoritesRightIcon.addEventListener('click', function () {\n    favoritesList.scrollBy({\n      left: SCROLL_AMOUNT,\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  function fetchWeather(cityName) {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${Key}`;\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        if (data.cod === 200) {\n          fetchCityImage(cityName)\n            .then(imageUrl => {\n              console.log('Fetched Image URL:', imageUrl);\n              document.body.style.backgroundImage = `url(${imageUrl})`;\n              document.body.style.backgroundSize = 'cover';\n              document.body.style.backgroundPosition = 'center';\n              document.body.style.backgroundRepeat = 'no-repeat';\n            })\n            .catch(error => {\n              console.error('Error fetching city image:', error);\n            });\n        } else {\n          alert(data.message);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching weather data:', error);\n      });\n  }\n\n  function isCityInFavorites(cityName) {\n    const items = favoritesList.querySelectorAll('.favorites_item');\n    for (let item of items) {\n      if (item.textContent.trim().toLowerCase() === cityName.toLowerCase()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function addToFavorites(cityName) {\n    const listItem = document.createElement('li');\n    listItem.classList.add('favorites_item');\n    listItem.textContent = cityName;\n\n    const closeButton = document.createElement('span');\n    closeButton.classList.add('close-button');\n    closeButton.textContent = 'x';\n    closeButton.addEventListener('click', function () {\n      listItem.remove();\n    });\n\n    listItem.appendChild(closeButton);\n    favoritesList.appendChild(listItem);\n  }\n\n  const findCityLocation = () => {\n    console.log('findCityLocation called');\n\n    const success = position => {\n      console.log('Location access allowed');\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      const geoApiUrl = `http://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&appid=${Key}`;\n      console.log('Latitude:', latitude, 'Longitude:', longitude);\n\n      fetch(geoApiUrl)\n        .then(res => res.json())\n        .then(data => {\n          if (data && data.length > 0) {\n            const cityName = data[0].name;\n            console.log('Resolved City:', cityName);\n            fetchWeather(cityName);\n          } else {\n            console.error('City not found.');\n          }\n        })\n        .catch(error => {\n          console.error('Error fetching city name:', error);\n        });\n    };\n\n    const error = () => {\n      console.error('Could not get location.');\n    };\n    navigator.geolocation.getCurrentPosition(success, error);\n    const locationIcon = document.querySelector('.search-bar_location-icon');\n    locationIcon.addEventListener('click', () => {\n      console.log('Location icon clicked');\n      navigator.geolocation.getCurrentPosition(success, error);\n    });\n  };\n\n  findCityLocation();\n});\n"],"names":["$48659db332377dd8$export$a9bd09813a73c79a","cityName","requestParameters","concat","encodeURIComponent","fetch","URL","then","res","ok","Error","json","image","hits","length","randomImg","Math","floor","random","largeImageURL","$c164d54782e67fd7$var$Key","document","addEventListener","console","log","form","querySelector","searchBarInput","starIcon","favoritesList","favoritesLeftIcon","favoritesRightIcon","event","preventDefault","value","trim","fetchWeather","this","classList","toggle","items","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","textContent","toLowerCase","err","return","isCityInFavorites","listItem","createElement","add","closeButton","remove","appendChild","addToFavorites","url","response","data","cod","imageUrl","body","style","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","catch","error","alert","message","scrollBy","left","top","behavior","success","position","latitude","coords","longitude","geoApiUrl","name","error1","navigator","geolocation","getCurrentPosition","findCityLocation"],"version":3,"file":"index.093af9bc.js.map"}