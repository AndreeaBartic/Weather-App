{"mappings":"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","sources":["src/background.js","src/display_currentdate.js","src/search-bar.js"],"sourcesContent":["export function fetchCityImage(cityName) {\n  const URL = 'https://pixabay.com/api/';\n  const KEY = 'key=40060920-6840b24aaee2d2997514145f9';\n  const requestParameters = `?image_type=photo&category=travel&orientation=horizontal&q=${encodeURIComponent(\n    cityName\n  )}&page=1&per_page=40`;\n\n  return fetch(URL + requestParameters + '&' + KEY)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return res.json();\n    })\n    .then(image => {\n      if (image.hits && image.hits.length) {\n        const randomImg = Math.floor(Math.random() * image.hits.length);\n        return image.hits[randomImg].largeImageURL;\n      } else {\n        throw new Error('No images found.');\n      }\n    });\n}\n","export function displayCurrentTime() {\n  const currentDate = new Date();\n  const dayDisplay = document.getElementById('dayDisplay');\n  const monthDisplay = document.getElementById('monthDisplay');\n  const timeDisplay = document.getElementById('timeDisplay');\n  const sunriseDisplay = document.getElementById('sunriseDisplay');\n  const sunsetDisplay = document.getElementById('sunsetDisplay');\n\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = daysOfWeek[currentDate.getDay()];\n  const month = months[currentDate.getMonth()];\n  const day = currentDate.getDate();\n  const hours = currentDate.getHours();\n  const minutes = currentDate.getMinutes();\n  const seconds = currentDate.getSeconds();\n\n  const formattedTime = `${hours.toString().padStart(2, '0')}:${minutes\n    .toString()\n    .padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  const ordinalIndicator = getOrdinalIndicator(day);\n  function getOrdinalIndicator(day) {\n    if (day >= 11 && day <= 13) {\n      return 'th';\n    }\n    switch (day % 10) {\n      case 1:\n        return 'st';\n      case 2:\n        return 'nd';\n      case 3:\n        return 'rd';\n      default:\n        return 'th';\n    }\n  }\n  dayDisplay.textContent = `${day}${ordinalIndicator} ${dayOfWeek}`;\n  monthDisplay.textContent = `${month}`;\n  timeDisplay.textContent = formattedTime;\n\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(position => {\n      const { latitude, longitude } = position.coords;\n      const apiKey = '384cfe62d8b3ed2e8a555db347025eef';\n\n      fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}`\n      )\n        .then(response => response.json())\n        .then(data => {\n          const DayContent = `\n          <h3>${day}<sup class=\"exponent\">${getOrdinalIndicator(\n            day\n          )}</sup> ${dayOfWeek}</h3>\n        `;\n          dayDisplay.innerHTML = DayContent;\n          const sunrise = new Date(data.sys.sunrise * 1000).toLocaleTimeString(\n            [],\n            { hour: '2-digit', minute: '2-digit', hour12: false }\n          );\n          const sunset = new Date(data.sys.sunset * 1000).toLocaleTimeString(\n            [],\n            { hour: '2-digit', minute: '2-digit', hour12: false }\n          );\n\n          sunriseDisplay.textContent = `${sunrise}`;\n          sunsetDisplay.textContent = `${sunset}`;\n        })\n        .catch(error =>\n          console.error('Error fetching data from OpenWeatherMap:', error)\n        );\n    });\n  }\n}\n","import { fetchCityImage } from './background.js';\nimport { displayCurrentTime } from './display_currentdate.js';\n\nconst Key = '07aed853a2b3116bf7e19dfeee63b968';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('DOMContentLoaded fired');\n  const form = document.querySelector('.search-bar');\n  const searchBarInput = document.querySelector('.search-bar_input');\n  const starIcon = document.querySelector('.search-bar_favorites-icon');\n  const favoritesList = document.querySelector('.favorites_list');\n  const favoritesLeftIcon = document.querySelector('.favorites_prev-btn');\n  const favoritesRightIcon = document.querySelector('.favorites_next-btn');\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n    const cityName = searchBarInput.value.trim();\n    if (cityName) {\n      fetchWeather(cityName);\n    }\n  });\n\n  starIcon.addEventListener('click', function () {\n    const cityName = searchBarInput.value.trim();\n    this.classList.toggle('selected');\n    if (cityName && !isCityInFavorites(cityName)) {\n      addToFavorites(cityName);\n    }\n  });\n\n  const SCROLL_AMOUNT = 100;\n  favoritesLeftIcon.addEventListener('click', function () {\n    favoritesList.scrollBy({\n      left: -SCROLL_AMOUNT,\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  favoritesRightIcon.addEventListener('click', function () {\n    favoritesList.scrollBy({\n      left: SCROLL_AMOUNT,\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n  displayCurrentTime();\n  function fetchWeather(cityName) {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${Key}`;\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        if (data.cod === 200) {\n          fetchCityImage(cityName)\n            .then(imageUrl => {\n              console.log('Fetched Image URL:', imageUrl);\n              document.body.style.backgroundImage = `url(${imageUrl})`;\n              document.body.style.backgroundSize = 'cover';\n              document.body.style.backgroundPosition = 'center';\n              document.body.style.backgroundRepeat = 'no-repeat';\n\n              const timezoneOffset = data.timezone / 3600;\n              document.body.style.height = '954px';\n              updateTimeForCity(cityName);\n              updateTimeWithTimeZone(timezoneOffset);\n            })\n            .catch(error => {\n              console.error('Error fetching city image:', error);\n            });\n        } else {\n          alert(data.message);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching weather data:', error);\n      });\n  }\n\n  function isCityInFavorites(cityName) {\n    const items = favoritesList.querySelectorAll('.favorites_item');\n    for (let item of items) {\n      if (item.textContent.trim().toLowerCase() === cityName.toLowerCase()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function addToFavorites(cityName) {\n    const listItem = document.createElement('li');\n    listItem.classList.add('favorites_item');\n    listItem.textContent = cityName;\n\n    const closeButton = document.createElement('span');\n    closeButton.classList.add('close-button');\n    closeButton.textContent = 'x';\n    closeButton.addEventListener('click', function () {\n      listItem.remove();\n    });\n\n    listItem.appendChild(closeButton);\n    favoritesList.appendChild(listItem);\n  }\n\n  const findCityLocation = () => {\n    console.log('findCityLocation called');\n\n    const success = position => {\n      console.log('Location access allowed');\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      const geoApiUrl = `http://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&appid=${Key}`;\n      console.log('Latitude:', latitude, 'Longitude:', longitude);\n\n      fetch(geoApiUrl)\n        .then(res => res.json())\n        .then(data => {\n          if (data && data.length > 0) {\n            const cityName = data[0].name;\n            console.log('Resolved City:', cityName);\n            fetchWeather(cityName);\n          } else {\n            console.error('City not found.');\n          }\n        })\n        .catch(error => {\n          console.error('Error fetching city name:', error);\n        });\n    };\n\n    const error = () => {\n      console.error('Could not get location.');\n    };\n    navigator.geolocation.getCurrentPosition(success, error);\n    const locationIcon = document.querySelector('.search-bar_location-icon');\n    locationIcon.addEventListener('click', () => {\n      console.log('Location icon clicked');\n      navigator.geolocation.getCurrentPosition(success, error);\n    });\n  };\n\n  findCityLocation();\n});\n"],"names":["$6a427eaf56dc66fa$export$a9bd09813a73c79a","cityName","requestParameters","encodeURIComponent","fetch","URL","then","res","ok","Error","json","image","hits","length","randomImg","Math","floor","random","largeImageURL","$13ba7c28a585df7a$export$14ea3ff1396d9e58","currentDate","Date","dayDisplay","document","getElementById","monthDisplay","timeDisplay","sunriseDisplay","sunsetDisplay","dayOfWeek","getDay","month","getMonth","day1","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","toString","padStart","ordinalIndicator","getOrdinalIndicator","day","textContent","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","response","data","DayContent","innerHTML","sunrise","sys","toLocaleTimeString","hour","minute","hour12","sunset","catch","error","console","addEventListener","log","form","querySelector","searchBarInput","starIcon","favoritesList","favoritesLeftIcon","favoritesRightIcon","event","preventDefault","value","trim","fetchWeather","this","classList","toggle","items","querySelectorAll","item","toLowerCase","isCityInFavorites","listItem","createElement","add","closeButton","remove","appendChild","addToFavorites","cod","imageUrl","body","style","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","timezoneOffset","timezone","height","updateTimeForCity","updateTimeWithTimeZone","alert","message","scrollBy","left","top","behavior","success","geoApiUrl","name","error1","findCityLocation"],"version":3,"file":"index.9df75a25.js.map"}