{"mappings":"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","sources":["src/background.js","src/display_citydate.js","src/search-bar.js"],"sourcesContent":["export function fetchCityImage(cityName) {\n  const URL = 'https://pixabay.com/api/';\n  const KEY = 'key=40060920-6840b24aaee2d2997514145f9';\n  const requestParameters = `?image_type=photo&category=travel&orientation=horizontal&q=${encodeURIComponent(\n    cityName\n  )}&page=1&per_page=40`;\n\n  return fetch(URL + requestParameters + '&' + KEY)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return res.json();\n    })\n    .then(image => {\n      if (image.hits && image.hits.length) {\n        const randomImg = Math.floor(Math.random() * image.hits.length);\n        return image.hits[randomImg].largeImageURL;\n      } else {\n        throw new Error('No images found.');\n      }\n    });\n}\n","export function updateTimeForCity(cityName) {\n  const sunriseDisplay = document.getElementById('sunriseDisplay');\n  const sunsetDisplay = document.getElementById('sunsetDisplay');\n\n  if (!cityName) {\n    console.error('City name is missing.');\n    return;\n  }\n  const apiKey = '384cfe62d8b3ed2e8a555db347025eef';\n\n  // Fetch sunrise and sunset times for the specified city\n  fetch(\n    `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (data.cod === 200) {\n        const sunriseTime = new Date(\n          data.sys.sunrise * 1000\n        ).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n        const sunsetTime = new Date(data.sys.sunset * 1000).toLocaleTimeString(\n          [],\n          { hour: '2-digit', minute: '2-digit' }\n        );\n        sunriseDisplay.textContent = `${sunriseTime}`;\n        sunsetDisplay.textContent = `${sunsetTime}`;\n      } else {\n        console.error('Error fetching data for city:', data.message);\n      }\n    })\n    .catch(error =>\n      console.error('Error fetching data from OpenWeatherMap:', error)\n    );\n}\n\nexport function updateClockWithTimeZone(data) {\n  const currentTime = new Date();\n  let localTimeToGMT = data.locationTimezone / 3600;\n  let searchedCityToGMT = data.timezone / 3600;\n  let hours = currentTime.getHours();\n  let timeDifference = 0;\n  if (localTimeToGMT > searchedCityToGMT) {\n    if (localTimeToGMT >= 0) {\n      if (searchedCityToGMT >= 0) {\n        timeDifference = (localTimeToGMT - searchedCityToGMT) * -1;\n      } else if (searchedCityToGMT < 0) {\n        searchedCityToGMT *= -1;\n        timeDifference = (localTimeToGMT + searchedCityToGMT) * -1;\n      }\n    } else if (localTimeToGMT < 0) {\n      if (searchedCityToGMT < 0) {\n        searchedCityToGMT *= -1;\n        localTimeToGMT *= -1;\n        timeDifference = (localTimeToGMT - searchedCityToGMT) * -1;\n      }\n    }\n  } else if (searchedCityToGMT > localTimeToGMT) {\n    if (localTimeToGMT >= 0) {\n      timeDifference = searchedCityToGMT - localTimeToGMT;\n    } else if (localTimeToGMT < 0) {\n      localTimeToGMT *= -1;\n      timeDifference = searchedCityToGMT + localTimeToGMT;\n    }\n  }\n\n  if (timeDifference >= 0) {\n    if (hours + timeDifference >= 24) {\n      hours = timeDifference - (24 - hours);\n    } else {\n      hours += timeDifference;\n    }\n  } else if (timeDifference < 0) {\n    if (hours + timeDifference < 0) {\n      timeDifference *= -1;\n      hours = 24 - (timeDifference - hours);\n    } else {\n      timeDifference *= -1;\n      hours -= timeDifference;\n    }\n  }\n  const formattedHour = String(hours).padStart(2, '0');\n  const formattedMin = String(currentTime.getMinutes()).padStart(2, '0');\n  const formattedSec = String(currentTime.getSeconds()).padStart(2, '0');\n\n  const clockElement = document.querySelector('.dateDisplay__hour');\n  clockElement.textContent = `${formattedHour}:${formattedMin}:${formattedSec}`;\n}\n","import { fetchCityImage } from './background.js';\nimport { updateTimeForCity } from './display_citydate.js';\nimport { updateClockWithTimeZone } from './display_citydate.js';\n\nconst Key = '07aed853a2b3116bf7e19dfeee63b968';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('DOMContentLoaded fired');\n  const form = document.querySelector('.search-bar');\n  const searchBarInput = document.querySelector('.search-bar_input');\n  const starIcon = document.querySelector('.search-bar_favorites-icon');\n  const favoritesList = document.querySelector('.favorites_list');\n  const favoritesLeftIcon = document.querySelector('.favorites_prev-btn');\n  const favoritesRightIcon = document.querySelector('.favorites_next-btn');\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n    const cityName = searchBarInput.value.trim();\n    if (cityName) {\n      fetchWeather(cityName);\n    }\n  });\n\n  starIcon.addEventListener('click', function () {\n    const cityName = searchBarInput.value.trim();\n    this.classList.toggle('selected');\n    if (cityName && !isCityInFavorites(cityName)) {\n      addToFavorites(cityName);\n    }\n  });\n\n  const SCROLL_AMOUNT = 100;\n  favoritesLeftIcon.addEventListener('click', function () {\n    favoritesList.scrollBy({\n      left: -SCROLL_AMOUNT,\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  favoritesRightIcon.addEventListener('click', function () {\n    favoritesList.scrollBy({\n      left: SCROLL_AMOUNT,\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  function fetchWeather(cityName) {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${Key}`;\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        if (data.cod === 200) {\n          fetchCityImage(cityName)\n            .then(imageUrl => {\n              console.log('Fetched Image URL:', imageUrl);\n              document.body.style.backgroundImage = `url(${imageUrl})`;\n              document.body.style.backgroundSize = 'cover';\n              document.body.style.backgroundPosition = 'center';\n              document.body.style.backgroundRepeat = 'no-repeat';\n              updateClockWithTimeZone(data);\n              updateTimeForCity(cityName);\n            })\n            .catch(error => {\n              console.error('Error fetching city image:', error);\n            });\n        } else {\n          alert(data.message);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching weather data:', error);\n      });\n  }\n\n  function isCityInFavorites(cityName) {\n    const items = favoritesList.querySelectorAll('.favorites_item');\n    for (let item of items) {\n      if (item.textContent.trim().toLowerCase() === cityName.toLowerCase()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function addToFavorites(cityName) {\n    const listItem = document.createElement('li');\n    listItem.classList.add('favorites_item');\n    listItem.textContent = cityName;\n\n    const closeButton = document.createElement('span');\n    closeButton.classList.add('close-button');\n    closeButton.textContent = 'x';\n    closeButton.addEventListener('click', function () {\n      listItem.remove();\n    });\n\n    listItem.appendChild(closeButton);\n    favoritesList.appendChild(listItem);\n  }\n\n  const findCityLocation = () => {\n    console.log('findCityLocation called');\n\n    const success = position => {\n      console.log('Location access allowed');\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      const geoApiUrl = `https://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&appid=${Key}`;\n\n      fetch(geoApiUrl)\n        .then(res => res.json())\n        .then(data => {\n          if (data && data.length > 0) {\n            const cityName = data[0].name;\n            console.log('Resolved City:', cityName);\n            fetchWeather(cityName);\n          } else {\n            console.error('City not found.');\n          }\n        })\n        .catch(error => {\n          console.error('Error fetching city name:', error);\n        });\n    };\n\n    const error = () => {\n      console.error('Could not get location.');\n    };\n    navigator.geolocation.getCurrentPosition(success, error);\n    const locationIcon = document.querySelector('.search-bar_location-icon');\n    locationIcon.addEventListener('click', () => {\n      console.log('Location icon clicked');\n      navigator.geolocation.getCurrentPosition(success, error);\n    });\n  };\n\n  findCityLocation();\n});\n"],"names":["$48659db332377dd8$export$a9bd09813a73c79a","cityName","requestParameters","concat","encodeURIComponent","fetch","URL","then","res","ok","Error","json","image","hits","length","randomImg","Math","floor","random","largeImageURL","$086197b2a2ee90cd$export$76cd35b725472fef","sunriseDisplay","document","getElementById","sunsetDisplay","response","data","cod","sunriseTime","Date","sys","sunrise","toLocaleTimeString","hour","minute","sunsetTime","sunset","textContent","console","error","message","catch","$086197b2a2ee90cd$export$328f5c06ddd4d781","currentTime","localTimeToGMT","locationTimezone","searchedCityToGMT","timezone","hours","getHours","timeDifference","formattedHour","String","padStart","formattedMin","getMinutes","formattedSec","getSeconds","querySelector","$c164d54782e67fd7$var$Key","addEventListener","log","form","searchBarInput","starIcon","favoritesList","favoritesLeftIcon","favoritesRightIcon","event","preventDefault","value","trim","fetchWeather","this","classList","toggle","items","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","toLowerCase","err","return","isCityInFavorites","listItem","createElement","add","closeButton","remove","appendChild","addToFavorites","url","imageUrl","body","style","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","alert","scrollBy","left","top","behavior","success","position","latitude","coords","longitude","geoApiUrl","name","error1","navigator","geolocation","getCurrentPosition","findCityLocation"],"version":3,"file":"index.d463b88e.js.map"}