{"mappings":"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","sources":["src/background.js","src/display_citydate.js","src/display_currentdate.js","src/search-bar.js"],"sourcesContent":["export function fetchCityImage(cityName) {\n  const URL = 'https://pixabay.com/api/';\n  const KEY = 'key=40060920-6840b24aaee2d2997514145f9';\n  const requestParameters = `?image_type=photo&category=travel&orientation=horizontal&q=${encodeURIComponent(\n    cityName\n  )}&page=1&per_page=40`;\n\n  return fetch(URL + requestParameters + '&' + KEY)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return res.json();\n    })\n    .then(image => {\n      if (image.hits && image.hits.length) {\n        const randomImg = Math.floor(Math.random() * image.hits.length);\n        return image.hits[randomImg].largeImageURL;\n      } else {\n        throw new Error('No images found.');\n      }\n    });\n}\n","const apiKey = '384cfe62d8b3ed2e8a555db347025eef';\n\nexport function updateTimeForCity(cityName) {\n  if (!cityName) {\n    console.error('City name is missing.');\n    return;\n  }\n\n  fetch(\n    `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}`\n  )\n    .then(response => response.json())\n    .then(data => {\n      if (data.cod === 200) {\n        const sunriseTime = new Date(\n          data.sys.sunrise * 1000\n        ).toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: false,\n        });\n        const sunsetTime = new Date(data.sys.sunset * 1000).toLocaleTimeString(\n          [],\n          {\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: false,\n          }\n        );\n\n        const sunriseDisplay = document.getElementById('sunriseDisplay');\n        const sunsetDisplay = document.getElementById('sunsetDisplay');\n\n        sunriseDisplay.textContent = `${sunriseTime}`;\n        sunsetDisplay.textContent = `${sunsetTime}`;\n      } else {\n        console.error('Error fetching data for city:', data.message);\n      }\n    })\n    .catch(error =>\n      console.error('Error fetching data from OpenWeatherMap:', error)\n    );\n}\n\nexport function updateTimeWithTimeZone(timezoneOffset) {\n  const currentTime = new Date();\n  const localTimeToGMT = currentTime.getTimezoneOffset() / 60;\n  const timeDifference = timezoneOffset + localTimeToGMT;\n\n  let hours = currentTime.getHours() + timeDifference;\n  hours = (hours + 24) % 24; // Ensure hours are between 0 and 23\n\n  const formattedHour = String(hours).padStart(2, '0');\n  const formattedMin = String(currentTime.getMinutes()).padStart(2, '0');\n  const formattedSec = String(currentTime.getSeconds()).padStart(2, '0');\n\n  const timeElement = document.querySelector('.dateDisplay__hour');\n  timeElement.textContent = `${formattedHour}:${formattedMin}:${formattedSec}`;\n}\n","function displayCurrentTime() {\n  let timezoneOffset = 0;\n\n  const currentDate = new Date();\n  const dayDisplay = document.getElementById('dayDisplay');\n  const monthDisplay = document.getElementById('monthDisplay');\n  const timeDisplay = document.getElementById('timeDisplay');\n  const sunriseDisplay = document.getElementById('sunriseDisplay');\n  const sunsetDisplay = document.getElementById('sunsetDisplay');\n\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const dayOfWeek = daysOfWeek[currentDate.getDay()];\n  const month = months[currentDate.getMonth()];\n  const day = currentDate.getDate();\n  const hours = currentDate.getHours();\n  const minutes = currentDate.getMinutes();\n  const seconds = currentDate.getSeconds();\n\n  const formattedTime = `${hours.toString().padStart(2, '0')}:${minutes\n    .toString()\n    .padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  const ordinalIndicator = getOrdinalIndicator(day);\n  function getOrdinalIndicator(day) {\n    if (day >= 11 && day <= 13) {\n      return 'th';\n    }\n    switch (day % 10) {\n      case 1:\n        return 'st';\n      case 2:\n        return 'nd';\n      case 3:\n        return 'rd';\n      default:\n        return 'th';\n    }\n  }\n  dayDisplay.textContent = `${day}${ordinalIndicator} ${dayOfWeek}`;\n  monthDisplay.textContent = `${month}`;\n  timeDisplay.textContent = formattedTime;\n\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(position => {\n      const { latitude, longitude } = position.coords;\n      const apiKey = '384cfe62d8b3ed2e8a555db347025eef';\n\n      fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}`\n      )\n        .then(response => response.json())\n        .then(data => {\n          const DayContent = `\n          <h3>${day}<sup class=\"exponent\">${getOrdinalIndicator(\n            day\n          )}</sup> ${dayOfWeek}</h3>\n        `;\n          dayDisplay.innerHTML = DayContent;\n          const sunrise = new Date(data.sys.sunrise * 1000).toLocaleTimeString(\n            [],\n            { hour: '2-digit', minute: '2-digit', hour12: false }\n          );\n          const sunset = new Date(data.sys.sunset * 1000).toLocaleTimeString(\n            [],\n            { hour: '2-digit', minute: '2-digit', hour12: false }\n          );\n\n          sunriseDisplay.textContent = `${sunrise}`;\n          sunsetDisplay.textContent = `${sunset}`;\n        })\n        .catch(error =>\n          console.error('Error fetching data from OpenWeatherMap:', error)\n        );\n    });\n  }\n}\ndisplayCurrentTime();\n","import { fetchCityImage } from './background.js';\nimport { updateTimeForCity } from './display_citydate.js';\nimport { updateTimeWithTimeZone } from './display_citydate.js';\nimport { displayCurrentTime } from './display_currentdate.js';\n\nconst Key = '07aed853a2b3116bf7e19dfeee63b968';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('DOMContentLoaded fired');\n  const form = document.querySelector('.search-bar');\n  const searchBarInput = document.querySelector('.search-bar_input');\n  const starIcon = document.querySelector('.search-bar_favorites-icon');\n  const favoritesList = document.querySelector('.favorites_list');\n  const favoritesLeftIcon = document.querySelector('.favorites_prev-btn');\n  const favoritesRightIcon = document.querySelector('.favorites_next-btn');\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n    const cityName = searchBarInput.value.trim();\n    if (cityName) {\n      fetchWeather(cityName);\n    }\n  });\n\n  starIcon.addEventListener('click', function () {\n    const cityName = searchBarInput.value.trim();\n    this.classList.toggle('selected');\n    if (cityName && !isCityInFavorites(cityName)) {\n      addToFavorites(cityName);\n    }\n  });\n\n  const SCROLL_AMOUNT = 100;\n  favoritesLeftIcon.addEventListener('click', function () {\n    favoritesList.scrollBy({\n      left: -SCROLL_AMOUNT,\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  favoritesRightIcon.addEventListener('click', function () {\n    favoritesList.scrollBy({\n      left: SCROLL_AMOUNT,\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n  displayCurrentTime();\n  function fetchWeather(cityName) {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${Key}`;\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        if (data.cod === 200) {\n          fetchCityImage(cityName)\n            .then(imageUrl => {\n              console.log('Fetched Image URL:', imageUrl);\n              document.body.style.backgroundImage = `url(${imageUrl})`;\n              document.body.style.backgroundSize = 'cover';\n              document.body.style.backgroundPosition = 'center';\n              document.body.style.backgroundRepeat = 'no-repeat';\n            const timezoneOffset = data.timezone / 3600;\n              document.body.style.height = '954px';\n              updateTimeForCity(cityName);\n              updateTimeWithTimeZone(timezoneOffset);\n            })\n            .catch(error => {\n              console.error('Error fetching city image:', error);\n            });\n        } else {\n          alert(data.message);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching weather data:', error);\n      });\n  }\n\n  function isCityInFavorites(cityName) {\n    const items = favoritesList.querySelectorAll('.favorites_item');\n    for (let item of items) {\n      if (item.textContent.trim().toLowerCase() === cityName.toLowerCase()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function addToFavorites(cityName) {\n    const listItem = document.createElement('li');\n    listItem.classList.add('favorites_item');\n    listItem.textContent = cityName;\n\n    const closeButton = document.createElement('span');\n    closeButton.classList.add('close-button');\n    closeButton.textContent = 'x';\n    closeButton.addEventListener('click', function () {\n      listItem.remove();\n    });\n\n    listItem.appendChild(closeButton);\n    favoritesList.appendChild(listItem);\n  }\n\n  const findCityLocation = () => {\n    console.log('findCityLocation called');\n\n    const success = position => {\n      console.log('Location access allowed');\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      const geoApiUrl = `https://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&appid=${Key}`;\n\n      fetch(geoApiUrl)\n        .then(res => res.json())\n        .then(data => {\n          if (data && data.length > 0) {\n            const cityName = data[0].name;\n            console.log('Resolved City:', cityName);\n            fetchWeather(cityName);\n          } else {\n            console.error('City not found.');\n          }\n        })\n        .catch(error => {\n          console.error('Error fetching city name:', error);\n        });\n    };\n\n    const error = () => {\n      console.error('Could not get location.');\n    };\n    navigator.geolocation.getCurrentPosition(success, error);\n    const locationIcon = document.querySelector('.search-bar_location-icon');\n    locationIcon.addEventListener('click', () => {\n      console.log('Location icon clicked');\n      navigator.geolocation.getCurrentPosition(success, error);\n    });\n  };\n\n  findCityLocation();\n});\n"],"names":["$48659db332377dd8$export$a9bd09813a73c79a","cityName","requestParameters","concat","encodeURIComponent","fetch","URL","then","res","ok","Error","json","image","hits","length","randomImg","Math","floor","random","largeImageURL","$086197b2a2ee90cd$export$76cd35b725472fef","response","data","cod","sunriseTime","Date","sys","sunrise","toLocaleTimeString","hour","minute","hour12","sunsetTime","sunset","sunriseDisplay","document","getElementById","sunsetDisplay","textContent","console","error","message","catch","$086197b2a2ee90cd$export$5b79b85a9d852edc","timezoneOffset","currentTime","timeDifference","getTimezoneOffset","hours","getHours","formattedHour","String","padStart","formattedMin","getMinutes","formattedSec","getSeconds","querySelector","currentDate","dayDisplay","monthDisplay","timeDisplay","dayOfWeek","getDay","month","getMonth","day1","getDate","minutes","seconds","formattedTime","toString","ordinalIndicator","getOrdinalIndicator","day","navigator","geolocation","getCurrentPosition","position","_coords","coords","latitude","longitude","DayContent","innerHTML","$fa35d205d3ec4478$var$displayCurrentTime","$c164d54782e67fd7$var$Key","addEventListener","log","form","searchBarInput","starIcon","favoritesList","favoritesLeftIcon","favoritesRightIcon","event","preventDefault","value","trim","fetchWeather","this","classList","toggle","items","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","toLowerCase","err","return","isCityInFavorites","listItem","createElement","add","closeButton","remove","appendChild","addToFavorites","url","imageUrl","body","style","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","timezone","height","alert","scrollBy","left","top","behavior","$fa35d205d3ec4478$exports","displayCurrentTime","success","geoApiUrl","name","error1","findCityLocation"],"version":3,"file":"index.8852c484.js.map"}